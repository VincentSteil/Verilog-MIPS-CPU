Release 10.1 - xst K.39 (nt)
Copyright (c) 1995-2008 Xilinx, Inc.  All rights reserved.
--> Parameter TMPDIR set to Z:/Desktop/7ASynth/7aSynth/xst/projnav.tmp


Total REAL time to Xst completion: 0.00 secs
Total CPU time to Xst completion: 0.14 secs
 
--> Parameter xsthdpdir set to Z:/Desktop/7ASynth/7aSynth/xst


Total REAL time to Xst completion: 0.00 secs
Total CPU time to Xst completion: 0.14 secs
 
--> Reading design: Complete_MIPS.prj

TABLE OF CONTENTS
  1) Synthesis Options Summary
  2) HDL Compilation
  3) Design Hierarchy Analysis
  4) HDL Analysis
  5) HDL Synthesis
     5.1) HDL Synthesis Report
  6) Advanced HDL Synthesis
     6.1) Advanced HDL Synthesis Report
  7) Low Level Synthesis
  8) Partition Report
  9) Final Report
     9.1) Device utilization summary
     9.2) Partition Resource Summary
     9.3) TIMING REPORT


=========================================================================
*                      Synthesis Options Summary                        *
=========================================================================
---- Source Parameters
Input File Name                    : "Complete_MIPS.prj"
Input Format                       : mixed
Ignore Synthesis Constraint File   : NO

---- Target Parameters
Output File Name                   : "Complete_MIPS"
Output Format                      : NGC
Target Device                      : xc3s500e-5-fg320

---- Source Options
Top Module Name                    : Complete_MIPS
Automatic FSM Extraction           : YES
FSM Encoding Algorithm             : Auto
Safe Implementation                : No
FSM Style                          : lut
RAM Extraction                     : Yes
RAM Style                          : Auto
ROM Extraction                     : Yes
Mux Style                          : Auto
Decoder Extraction                 : YES
Priority Encoder Extraction        : YES
Shift Register Extraction          : YES
Logical Shifter Extraction         : YES
XOR Collapsing                     : YES
ROM Style                          : Auto
Mux Extraction                     : YES
Resource Sharing                   : YES
Asynchronous To Synchronous        : NO
Multiplier Style                   : auto
Automatic Register Balancing       : No

---- Target Options
Add IO Buffers                     : YES
Global Maximum Fanout              : 500
Add Generic Clock Buffer(BUFG)     : 24
Register Duplication               : YES
Slice Packing                      : YES
Optimize Instantiated Primitives   : NO
Use Clock Enable                   : Yes
Use Synchronous Set                : Yes
Use Synchronous Reset              : Yes
Pack IO Registers into IOBs        : auto
Equivalent register Removal        : YES

---- General Options
Optimization Goal                  : Speed
Optimization Effort                : 1
Library Search Order               : Complete_MIPS.lso
Keep Hierarchy                     : NO
Netlist Hierarchy                  : as_optimized
RTL Output                         : Yes
Global Optimization                : AllClockNets
Read Cores                         : YES
Write Timing Constraints           : NO
Cross Clock Analysis               : NO
Hierarchy Separator                : /
Bus Delimiter                      : <>
Case Specifier                     : maintain
Slice Utilization Ratio            : 100
BRAM Utilization Ratio             : 100
Verilog 2001                       : YES
Auto BRAM Packing                  : NO
Slice Utilization Ratio Delta      : 5

=========================================================================


=========================================================================
*                          HDL Compilation                              *
=========================================================================
Compiling verilog file "seven_seg_converter.v" in library work
Compiling verilog file "niceDivider.v" in library work
Module <seven_seg_converter> compiled
Compiling verilog file "bcdToSevenSeg.v" in library work
Module <niceDivider> compiled
Compiling verilog file "REG.v" in library work
Module <hexToSevenSeg> compiled
Compiling verilog file "MIPS_CPU.v" in library work
Module <REG> compiled
Compiling verilog file "Memory.v" in library work
Module <MIPS_CPU> compiled
Compiling verilog file "Debouncer.v" in library work
Module <Memory> compiled
Compiling verilog file "MIPS.v" in library work
Module <Debouncer> compiled
Module <Complete_MIPS> compiled
No errors in compilation
Analysis of file <"Complete_MIPS.prj"> succeeded.
 

=========================================================================
*                     Design Hierarchy Analysis                         *
=========================================================================
Analyzing hierarchy for module <Complete_MIPS> in library <work>.

Analyzing hierarchy for module <Debouncer> in library <work>.

Analyzing hierarchy for module <MIPS_CPU> in library <work> with parameters.
	ADD8 = "00000000000000000000000001011100"
	ADD8_2 = "00000000000000000000000001011101"
	ADD8_3 = "00000000000000000000000001011110"
	ADD8_4 = "00000000000000000000000001011111"
	ADD8_5 = "00000000000000000000000001100000"
	AND1 = "00000000000000000000000000010000"
	AND1_2 = "00000000000000000000000000010001"
	AND1_3 = "00000000000000000000000000010010"
	AND1_4 = "00000000000000000000000000010011"
	AND1_5 = "00000000000000000000000001000111"
	Add = "00000000000000000000000000000100"
	Add_2 = "00000000000000000000000000000101"
	Add_3 = "00000000000000000000000000000110"
	Add_4 = "00000000000000000000000000000111"
	Add_5 = "00000000000000000000000001000000"
	JAL = "00000000000000000000000001010001"
	JAL_2 = "00000000000000000000000001010010"
	LUI = "00000000000000000000000001010011"
	LUI_2 = "00000000000000000000000001010100"
	MFHI = "00000000000000000000000001011000"
	MFHI_2 = "00000000000000000000000001011001"
	MFLO = "00000000000000000000000001011010"
	MFLO_2 = "00000000000000000000000001011011"
	Mult = "00000000000000000000000001010101"
	Mult_2 = "00000000000000000000000001010110"
	Mult_3 = "00000000000000000000000001010111"
	OR1 = "00000000000000000000000000010100"
	OR1_2 = "00000000000000000000000000010101"
	OR1_3 = "00000000000000000000000000010110"
	OR1_4 = "00000000000000000000000000010111"
	OR1_5 = "00000000000000000000000001000110"
	RBIT = "00000000000000000000000001100001"
	RBIT_2 = "00000000000000000000000001100010"
	RBIT_3 = "00000000000000000000000001100011"
	RBIT_4 = "00000000000000000000000001100100"
	RBIT_5 = "00000000000000000000000001100101"
	REV = "00000000000000000000000001100110"
	REV_2 = "00000000000000000000000001100111"
	REV_3 = "00000000000000000000000001101000"
	REV_4 = "00000000000000000000000001101001"
	REV_5 = "00000000000000000000000001101010"
	SADD = "00000000000000000000000001101011"
	SADD_2 = "00000000000000000000000001101100"
	SADD_3 = "00000000000000000000000001101101"
	SADD_4 = "00000000000000000000000001101110"
	SADD_5 = "00000000000000000000000001101111"
	SSUB = "00000000000000000000000001110000"
	SSUB_2 = "00000000000000000000000001110001"
	SSUB_3 = "00000000000000000000000001110010"
	SSUB_4 = "00000000000000000000000001110011"
	SSUB_5 = "00000000000000000000000001110100"
	Sub = "00000000000000000000000000001000"
	Sub_2 = "00000000000000000000000000001001"
	Sub_3 = "00000000000000000000000000001010"
	Sub_4 = "00000000000000000000000000001011"
	Sub_5 = "00000000000000000000000001000011"
	XOR1 = "00000000000000000000000000001100"
	XOR1_2 = "00000000000000000000000000001101"
	XOR1_3 = "00000000000000000000000000001110"
	XOR1_4 = "00000000000000000000000000001111"
	XOR1_5 = "00000000000000000000000001001000"
	addi = "00000000000000000000000000100110"
	addi_2 = "00000000000000000000000000100111"
	addi_3 = "00000000000000000000000000101000"
	addi_4 = "00000000000000000000000000101001"
	addi_5 = "00000000000000000000000001001100"
	andi = "00000000000000000000000000101010"
	andi_2 = "00000000000000000000000000101011"
	andi_3 = "00000000000000000000000000101100"
	andi_4 = "00000000000000000000000000101101"
	andi_5 = "00000000000000000000000001001101"
	beq = "00000000000000000000000000111011"
	beq_2 = "00000000000000000000000000111100"
	beq_3 = "00000000000000000000000001001111"
	bne = "00000000000000000000000000111101"
	bne_2 = "00000000000000000000000000111110"
	bne_3 = "00000000000000000000000001010000"
	decode_instr = "00000000000000000000000000000010"
	fetch_instr = "00000000000000000000000000000000"
	fetch_instr_2 = "00000000000000000000000000000001"
	invalid_instr = "00000000000000000000000000000011"
	j = "00000000000000000000000000111111"
	jr = "00000000000000000000000000100100"
	jr_2 = "00000000000000000000000000100101"
	jr_3 = "00000000000000000000000001000010"
	lw = "00000000000000000000000000110010"
	lw_2 = "00000000000000000000000000110011"
	lw_3 = "00000000000000000000000000110100"
	lw_4 = "00000000000000000000000000110101"
	lw_5 = "00000000000000000000000000110110"
	lw_6 = "00000000000000000000000001001011"
	ori = "00000000000000000000000000101110"
	ori_2 = "00000000000000000000000000101111"
	ori_3 = "00000000000000000000000000110000"
	ori_4 = "00000000000000000000000000110001"
	ori_5 = "00000000000000000000000001001110"
	sll = "00000000000000000000000000100000"
	sll_2 = "00000000000000000000000000100001"
	sll_3 = "00000000000000000000000000100010"
	sll_4 = "00000000000000000000000000100011"
	sll_5 = "00000000000000000000000001000001"
	slt = "00000000000000000000000000011000"
	slt_2 = "00000000000000000000000000011001"
	slt_3 = "00000000000000000000000000011010"
	slt_4 = "00000000000000000000000000011011"
	slt_5 = "00000000000000000000000001000100"
	srl = "00000000000000000000000000011100"
	srl_2 = "00000000000000000000000000011101"
	srl_3 = "00000000000000000000000000011110"
	srl_4 = "00000000000000000000000000011111"
	srl_5 = "00000000000000000000000001000101"
	sw = "00000000000000000000000000110111"
	sw_2 = "00000000000000000000000000111000"
	sw_3 = "00000000000000000000000000111001"
	sw_4 = "00000000000000000000000000111010"

Analyzing hierarchy for module <Memory> in library <work>.

Analyzing hierarchy for module <REG> in library <work>.

Analyzing hierarchy for module <hexToSevenSeg> in library <work>.

Analyzing hierarchy for module <seven_seg_converter> in library <work>.

Analyzing hierarchy for module <niceDivider> in library <work>.


=========================================================================
*                            HDL Analysis                               *
=========================================================================
Analyzing top module <Complete_MIPS>.
Module <Complete_MIPS> is correct for synthesis.
 
Analyzing module <Debouncer> in library <work>.
Module <Debouncer> is correct for synthesis.
 
Analyzing module <MIPS_CPU> in library <work>.
	ADD8 = 32'sb00000000000000000000000001011100
	ADD8_2 = 32'sb00000000000000000000000001011101
	ADD8_3 = 32'sb00000000000000000000000001011110
	ADD8_4 = 32'sb00000000000000000000000001011111
	ADD8_5 = 32'sb00000000000000000000000001100000
	AND1 = 32'sb00000000000000000000000000010000
	AND1_2 = 32'sb00000000000000000000000000010001
	AND1_3 = 32'sb00000000000000000000000000010010
	AND1_4 = 32'sb00000000000000000000000000010011
	AND1_5 = 32'sb00000000000000000000000001000111
	Add = 32'sb00000000000000000000000000000100
	Add_2 = 32'sb00000000000000000000000000000101
	Add_3 = 32'sb00000000000000000000000000000110
	Add_4 = 32'sb00000000000000000000000000000111
	Add_5 = 32'sb00000000000000000000000001000000
	JAL = 32'sb00000000000000000000000001010001
	JAL_2 = 32'sb00000000000000000000000001010010
	LUI = 32'sb00000000000000000000000001010011
	LUI_2 = 32'sb00000000000000000000000001010100
	MFHI = 32'sb00000000000000000000000001011000
	MFHI_2 = 32'sb00000000000000000000000001011001
	MFLO = 32'sb00000000000000000000000001011010
	MFLO_2 = 32'sb00000000000000000000000001011011
	Mult = 32'sb00000000000000000000000001010101
	Mult_2 = 32'sb00000000000000000000000001010110
	Mult_3 = 32'sb00000000000000000000000001010111
	OR1 = 32'sb00000000000000000000000000010100
	OR1_2 = 32'sb00000000000000000000000000010101
	OR1_3 = 32'sb00000000000000000000000000010110
	OR1_4 = 32'sb00000000000000000000000000010111
	OR1_5 = 32'sb00000000000000000000000001000110
	RBIT = 32'sb00000000000000000000000001100001
	RBIT_2 = 32'sb00000000000000000000000001100010
	RBIT_3 = 32'sb00000000000000000000000001100011
	RBIT_4 = 32'sb00000000000000000000000001100100
	RBIT_5 = 32'sb00000000000000000000000001100101
	REV = 32'sb00000000000000000000000001100110
	REV_2 = 32'sb00000000000000000000000001100111
	REV_3 = 32'sb00000000000000000000000001101000
	REV_4 = 32'sb00000000000000000000000001101001
	REV_5 = 32'sb00000000000000000000000001101010
	SADD = 32'sb00000000000000000000000001101011
	SADD_2 = 32'sb00000000000000000000000001101100
	SADD_3 = 32'sb00000000000000000000000001101101
	SADD_4 = 32'sb00000000000000000000000001101110
	SADD_5 = 32'sb00000000000000000000000001101111
	SSUB = 32'sb00000000000000000000000001110000
	SSUB_2 = 32'sb00000000000000000000000001110001
	SSUB_3 = 32'sb00000000000000000000000001110010
	SSUB_4 = 32'sb00000000000000000000000001110011
	SSUB_5 = 32'sb00000000000000000000000001110100
	Sub = 32'sb00000000000000000000000000001000
	Sub_2 = 32'sb00000000000000000000000000001001
	Sub_3 = 32'sb00000000000000000000000000001010
	Sub_4 = 32'sb00000000000000000000000000001011
	Sub_5 = 32'sb00000000000000000000000001000011
	XOR1 = 32'sb00000000000000000000000000001100
	XOR1_2 = 32'sb00000000000000000000000000001101
	XOR1_3 = 32'sb00000000000000000000000000001110
	XOR1_4 = 32'sb00000000000000000000000000001111
	XOR1_5 = 32'sb00000000000000000000000001001000
	addi = 32'sb00000000000000000000000000100110
	addi_2 = 32'sb00000000000000000000000000100111
	addi_3 = 32'sb00000000000000000000000000101000
	addi_4 = 32'sb00000000000000000000000000101001
	addi_5 = 32'sb00000000000000000000000001001100
	andi = 32'sb00000000000000000000000000101010
	andi_2 = 32'sb00000000000000000000000000101011
	andi_3 = 32'sb00000000000000000000000000101100
	andi_4 = 32'sb00000000000000000000000000101101
	andi_5 = 32'sb00000000000000000000000001001101
	beq = 32'sb00000000000000000000000000111011
	beq_2 = 32'sb00000000000000000000000000111100
	beq_3 = 32'sb00000000000000000000000001001111
	bne = 32'sb00000000000000000000000000111101
	bne_2 = 32'sb00000000000000000000000000111110
	bne_3 = 32'sb00000000000000000000000001010000
	decode_instr = 32'sb00000000000000000000000000000010
	fetch_instr = 32'sb00000000000000000000000000000000
	fetch_instr_2 = 32'sb00000000000000000000000000000001
	invalid_instr = 32'sb00000000000000000000000000000011
	j = 32'sb00000000000000000000000000111111
	jr = 32'sb00000000000000000000000000100100
	jr_2 = 32'sb00000000000000000000000000100101
	jr_3 = 32'sb00000000000000000000000001000010
	lw = 32'sb00000000000000000000000000110010
	lw_2 = 32'sb00000000000000000000000000110011
	lw_3 = 32'sb00000000000000000000000000110100
	lw_4 = 32'sb00000000000000000000000000110101
	lw_5 = 32'sb00000000000000000000000000110110
	lw_6 = 32'sb00000000000000000000000001001011
	ori = 32'sb00000000000000000000000000101110
	ori_2 = 32'sb00000000000000000000000000101111
	ori_3 = 32'sb00000000000000000000000000110000
	ori_4 = 32'sb00000000000000000000000000110001
	ori_5 = 32'sb00000000000000000000000001001110
	sll = 32'sb00000000000000000000000000100000
	sll_2 = 32'sb00000000000000000000000000100001
	sll_3 = 32'sb00000000000000000000000000100010
	sll_4 = 32'sb00000000000000000000000000100011
	sll_5 = 32'sb00000000000000000000000001000001
	slt = 32'sb00000000000000000000000000011000
	slt_2 = 32'sb00000000000000000000000000011001
	slt_3 = 32'sb00000000000000000000000000011010
	slt_4 = 32'sb00000000000000000000000000011011
	slt_5 = 32'sb00000000000000000000000001000100
	srl = 32'sb00000000000000000000000000011100
	srl_2 = 32'sb00000000000000000000000000011101
	srl_3 = 32'sb00000000000000000000000000011110
	srl_4 = 32'sb00000000000000000000000000011111
	srl_5 = 32'sb00000000000000000000000001000101
	sw = 32'sb00000000000000000000000000110111
	sw_2 = 32'sb00000000000000000000000000111000
	sw_3 = 32'sb00000000000000000000000000111001
	sw_4 = 32'sb00000000000000000000000000111010
Module <MIPS_CPU> is correct for synthesis.
 
Analyzing module <REG> in library <work>.
Module <REG> is correct for synthesis.
 
Analyzing module <hexToSevenSeg> in library <work>.
Module <hexToSevenSeg> is correct for synthesis.
 
Analyzing module <seven_seg_converter> in library <work>.
Module <seven_seg_converter> is correct for synthesis.
 
Analyzing module <niceDivider> in library <work>.
Module <niceDivider> is correct for synthesis.
 
Analyzing module <Memory> in library <work>.
INFO:Xst:2546 - "Memory.v" line 15: reading initialization file "program3bit.txt".
INFO:Xst:1607 - Contents of array <RAM> may be accessed with an index that does not cover the full array size.
INFO:Xst:1607 - Contents of array <RAM> may be accessed with an index that does not cover the full array size.
Module <Memory> is correct for synthesis.
 

=========================================================================
*                           HDL Synthesis                               *
=========================================================================

Performing bidirectional port resolution...
INFO:Xst:2679 - Register <i> in unit <MIPS_CPU> has a constant value of 100000 during circuit operation. The register is replaced by logic.

Synthesizing Unit <Debouncer>.
    Related source file is "Debouncer.v".
    Found 17-bit up counter for signal <count2ms>.
    Found 1-bit register for signal <Q1>.
    Found 1-bit register for signal <Q2>.
    Summary:
	inferred   1 Counter(s).
	inferred   2 D-type flip-flop(s).
Unit <Debouncer> synthesized.


Synthesizing Unit <Memory>.
    Related source file is "Memory.v".
WARNING:Xst:647 - Input <ADDR<31:7>> is never used. This port will be preserved and left unconnected if it belongs to a top-level block or it belongs to a sub-block and the hierarchy of this sub-block is preserved.
    Found 128x32-bit single-port RAM <Mram_RAM> for signal <RAM>.
    Found 32-bit tristate buffer for signal <Mem_Bus>.
    Found 32-bit register for signal <data_out>.
    Summary:
	inferred   1 RAM(s).
	inferred  32 D-type flip-flop(s).
	inferred  32 Tristate(s).
Unit <Memory> synthesized.


Synthesizing Unit <seven_seg_converter>.
    Related source file is "seven_seg_converter.v".
    Found 16x7-bit ROM for signal <seven_seg_code>.
    Summary:
	inferred   1 ROM(s).
Unit <seven_seg_converter> synthesized.


Synthesizing Unit <niceDivider>.
    Related source file is "niceDivider.v".
    Found 1-bit register for signal <kindaSlowClk>.
    Found 27-bit up counter for signal <counter1>.
    Summary:
	inferred   1 Counter(s).
	inferred   1 D-type flip-flop(s).
Unit <niceDivider> synthesized.


Synthesizing Unit <hexToSevenSeg>.
    Related source file is "bcdToSevenSeg.v".
    Found 4x2-bit ROM for signal <sev_seg_ctrl$rom0000>.
    Found 7-bit register for signal <C>.
    Found 7-bit 4-to-1 multiplexer for signal <C$mux0000>.
    Found 1-bit register for signal <dFourEn>.
    Found 1-bit register for signal <dOneEn>.
    Found 1-bit register for signal <dThreeEn>.
    Found 1-bit register for signal <dTwoEn>.
    Found 2-bit up counter for signal <sev_seg_ctrl>.
    Summary:
	inferred   1 ROM(s).
	inferred   1 Counter(s).
	inferred  11 D-type flip-flop(s).
	inferred   7 Multiplexer(s).
Unit <hexToSevenSeg> synthesized.


Synthesizing Unit <REG>.
    Related source file is "REG.v".
    Found 32-bit register for signal <ReadReg1>.
    Found 32-bit register for signal <ReadReg2>.
    Found 1024-bit register for signal <REG>.
    Found 16-bit register for signal <Reg_to_Seven_Seg>.
    Found 16-bit 4-to-1 multiplexer for signal <Reg_to_Seven_Seg$mux0000> created at line 42.
INFO:Xst:738 - HDL ADVISOR - 1024 flip-flops were inferred for signal <REG>. You may be trying to describe a RAM in a way that is incompatible with block and distributed RAM resources available on Xilinx devices, or with a specific template that is not supported. Please review the Xilinx resources documentation and the XST user manual for coding guidelines. Taking advantage of RAM resources will lead to improved device usage and reduced synthesis time.
    Summary:
	inferred 1104 D-type flip-flop(s).
	inferred  80 Multiplexer(s).
Unit <REG> synthesized.


Synthesizing Unit <MIPS_CPU>.
    Related source file is "MIPS_CPU.v".
    Found finite state machine <FSM_0> for signal <state>.
    -----------------------------------------------------------------------
    | States             | 115                                            |
    | Transitions        | 143                                            |
    | Inputs             | 28                                             |
    | Outputs            | 92                                             |
    | Clock              | CLK (rising_edge)                              |
    | Power Up State     | 000000000                                      |
    | Encoding           | automatic                                      |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found 32-bit register for signal <ADDR>.
    Found 32-bit tristate buffer for signal <Mem_Bus>.
    Found 1-bit register for signal <CS>.
    Found 1-bit register for signal <WE>.
    Found 32-bit adder for signal <$add0000> created at line 301.
    Found 32-bit adder for signal <$add0001> created at line 542.
    Found 8-bit adder for signal <$add0002> created at line 798.
    Found 8-bit adder for signal <$add0003> created at line 799.
    Found 8-bit adder for signal <$add0004> created at line 800.
    Found 8-bit adder for signal <$add0005> created at line 801.
    Found 32-bit shifter logical right for signal <$shift0000> created at line 472.
    Found 32-bit shifter logical left for signal <$shift0001> created at line 499.
    Found 32-bit subtractor for signal <$sub0000> created at line 329.
    Found 32-bit register for signal <ALU_out>.
    Found 1-bit xor2 for signal <ALU_out_0$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_1$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_10$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_11$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_12$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_13$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_14$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_15$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_16$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_17$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_18$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_19$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_2$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_20$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_21$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_22$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_23$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_24$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_25$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_26$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_27$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_28$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_29$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_3$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_30$xor0000> created at line 358.
    Found 32-bit comparator greater for signal <ALU_out_31$cmp_gt0000> created at line 889.
    Found 32-bit comparator less for signal <ALU_out_31$cmp_lt0000> created at line 921.
    Found 32-bit adder for signal <ALU_out_31$sub0000> created at line 889.
    Found 1-bit xor2 for signal <ALU_out_31$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_4$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_5$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_6$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_7$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_8$xor0000> created at line 358.
    Found 1-bit xor2 for signal <ALU_out_9$xor0000> created at line 358.
    Found 5-bit register for signal <DR>.
    Found 32-bit register for signal <instruction>.
    Found 32-bit register for signal <lw_buffer>.
    Found 32-bit register for signal <PC>.
    Found 32-bit comparator equal for signal <PC$cmp_eq0000> created at line 684.
    Found 32-bit comparator not equal for signal <PC$cmp_ne0000> created at line 705.
    Found 32-bit adder for signal <PC$share0000> created at line 194.
    Found 64-bit register for signal <prod>.
    Found 32x32-bit multiplier for signal <prod$mult0000> created at line 757.
    Found 32-bit register for signal <Reg_In>.
    Found 1-bit register for signal <RegW>.
    Found 5-bit register for signal <SR1>.
    Found 5-bit register for signal <SR2>.
    Found 32-bit register for signal <sw_buffer>.
    Summary:
	inferred   1 Finite State Machine(s).
	inferred 306 D-type flip-flop(s).
	inferred   9 Adder/Subtractor(s).
	inferred   1 Multiplier(s).
	inferred   4 Comparator(s).
	inferred   2 Combinational logic shifter(s).
	inferred  32 Tristate(s).
Unit <MIPS_CPU> synthesized.


Synthesizing Unit <Complete_MIPS>.
    Related source file is "MIPS.v".
Unit <Complete_MIPS> synthesized.

INFO:Xst:1767 - HDL ADVISOR - Resource sharing has identified that some arithmetic operations in this design can share the same physical resources for reduced device utilization. For improved clock frequency you may try to disable resource sharing.

=========================================================================
HDL Synthesis Report

Macro Statistics
# RAMs                                                 : 1
 128x32-bit single-port RAM                            : 1
# ROMs                                                 : 5
 16x7-bit ROM                                          : 4
 4x2-bit ROM                                           : 1
# Multipliers                                          : 1
 32x32-bit multiplier                                  : 1
# Adders/Subtractors                                   : 9
 32-bit adder                                          : 4
 32-bit subtractor                                     : 1
 8-bit adder                                           : 4
# Counters                                             : 4
 17-bit up counter                                     : 2
 2-bit up counter                                      : 1
 27-bit up counter                                     : 1
# Registers                                            : 91
 1-bit register                                        : 44
 16-bit register                                       : 1
 32-bit register                                       : 41
 5-bit register                                        : 3
 64-bit register                                       : 1
 7-bit register                                        : 1
# Comparators                                          : 4
 32-bit comparator equal                               : 1
 32-bit comparator greater                             : 1
 32-bit comparator less                                : 1
 32-bit comparator not equal                           : 1
# Multiplexers                                         : 4
 16-bit 4-to-1 multiplexer                             : 1
 32-bit 32-to-1 multiplexer                            : 2
 7-bit 4-to-1 multiplexer                              : 1
# Logic shifters                                       : 2
 32-bit shifter logical left                           : 1
 32-bit shifter logical right                          : 1
# Tristates                                            : 2
 32-bit tristate buffer                                : 2
# Xors                                                 : 32
 1-bit xor2                                            : 32

=========================================================================

=========================================================================
*                       Advanced HDL Synthesis                          *
=========================================================================

Analyzing FSM <FSM_0> for best encoding.
Optimizing FSM <CPU/state> on signal <state[1:115]> with one-hot encoding.
----------------------------------------------------------------------------------------------------------------------------------
 State     | Encoding
----------------------------------------------------------------------------------------------------------------------------------
 000000000 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
 000000001 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010
 000000010 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100
 000000011 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000
 000000100 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000
 000000101 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000
 000000110 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000
 000000111 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000
 000001000 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000
 000001001 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000
 000001010 | 0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000
 000001011 | 0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000
 000001100 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000
 000001101 | 0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000
 000001110 | 0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000
 000001111 | 0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000
 000010000 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000
 000010001 | 0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000
 000010010 | 0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000
 000010011 | 0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000
 000010100 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000
 000010101 | 0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000
 000010110 | 0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000
 000010111 | 0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000
 000011000 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000
 000011001 | 0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000
 000011010 | 0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000
 000011011 | 0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000
 000011100 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000
 000011101 | 0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000
 000011110 | 0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000
 000011111 | 0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000
 000100000 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000
 000100001 | 0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000
 000100010 | 0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000
 000100011 | 0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000
 000100100 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000
 000100101 | 0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000
 000100110 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000
 000100111 | 0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000
 000101000 | 0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000
 000101001 | 0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000
 000101010 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000
 000101011 | 0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000
 000101100 | 0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000
 000101101 | 0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000
 000101110 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000
 000101111 | 0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000
 000110000 | 0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000
 000110001 | 0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000
 000110010 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000
 000110011 | 0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000
 000110100 | 0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000
 000110101 | 0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000
 000110110 | 0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000
 000110111 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000
 000111000 | 0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000
 000111001 | 0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000
 000111010 | 0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 000111011 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000
 000111100 | 0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 000111101 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000
 000111110 | 0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 000111111 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000
 001000000 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000
 001000001 | 0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000
 001000010 | 0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000
 001000011 | 0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000
 001000100 | 0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000
 001000101 | 0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000
 001000110 | 0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000
 001000111 | 0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000
 001001000 | 0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000
 001001011 | 0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001001100 | 0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000
 001001101 | 0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000
 001001110 | 0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000
 001001111 | 0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001010000 | 0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001010001 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000
 001010010 | 0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001010011 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000
 001010100 | 0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001010101 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000
 001010110 | 0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001010111 | 0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001011000 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000
 001011001 | 0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001011010 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000
 001011011 | 0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001011100 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000
 001011101 | 0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001011110 | 0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001011111 | 0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001100000 | 0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001100001 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000
 001100010 | 0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001100011 | 0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001100100 | 0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001100101 | 0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001100110 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000
 001100111 | 0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001101000 | 0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001101001 | 0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001101010 | 0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001101011 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000
 001101100 | 0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001101101 | 0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001101110 | 0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001101111 | 0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001110000 | 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000
 001110001 | 0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001110010 | 0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001110011 | 0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 001110100 | 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
----------------------------------------------------------------------------------------------------------------------------------
Loading device for application Rf_Device from file '3s500e.nph' in environment C:\Xilinx\10.1\ISE.

Synthesizing (advanced) Unit <Complete_MIPS>.
INFO:Xst - The RAM <MEM/Mram_RAM> will be implemented as a BLOCK RAM, absorbing the following register(s): <MEM/data_out>
    -----------------------------------------------------------------------
    | ram_type           | Block                               |          |
    -----------------------------------------------------------------------
    | Port A                                                              |
    |     aspect ratio   | 128-word x 32-bit                   |          |
    |     mode           | read-first                          |          |
    |     clkA           | connected to signal <CLK>           | fall     |
    |     weA            | connected to signal <MEM/_and0000>  | high     |
    |     addrA          | connected to signal <ADDR>          |          |
    |     diA            | connected to signal <Mem_Bus>       |          |
    |     doA            | connected to signal <MEM/data_out>  |          |
    -----------------------------------------------------------------------
    | optimization       | speed                               |          |
    -----------------------------------------------------------------------
Unit <Complete_MIPS> synthesized (advanced).

Synthesizing (advanced) Unit <MIPS_CPU>.
	Found pipelined multiplier on signal <prod_mult0000>:
		- 1 pipeline level(s) found in a register connected to the multiplier macro output.
		Pushing register(s) into the multiplier macro.

		- 1 pipeline level(s) found in a register on signal <ReadReg1>.
		Pushing register(s) into the multiplier macro.

		- 1 pipeline level(s) found in a register on signal <ReadReg2>.
		Pushing register(s) into the multiplier macro.
INFO:Xst:2385 - HDL ADVISOR - You can improve the performance of the multiplier Mmult_prod_mult0000 by adding 2 register level(s).
INFO:Xst:2385 - HDL ADVISOR - You can improve the performance of the multiplier Mmult_prod_mult0000 by adding 2 register level(s).
Unit <MIPS_CPU> synthesized (advanced).
WARNING:Xst:1293 - FF/Latch <CPU/reg1/REG_1_31> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_30> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_29> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_28> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_27> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_26> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_25> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_24> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_23> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_22> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_21> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_20> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_19> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_18> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_17> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_16> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_15> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_14> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_13> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_12> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_11> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_10> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_9> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_8> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_7> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_6> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_5> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_4> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1896 - Due to other FF/Latch trimming, FF/Latch <CPU/reg1/REG_1_3> has a constant value of 0 in block <Complete_MIPS>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:2677 - Node <CPU/ADDR_7> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_8> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_9> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_10> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_11> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_12> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_13> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_14> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_15> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_16> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_17> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_18> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_19> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_20> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_21> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_22> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_23> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_24> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_25> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_26> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_27> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_28> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_29> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_30> of sequential type is unconnected in block <Complete_MIPS>.
WARNING:Xst:2677 - Node <CPU/ADDR_31> of sequential type is unconnected in block <Complete_MIPS>.

=========================================================================
Advanced HDL Synthesis Report

Macro Statistics
# RAMs                                                 : 1
 128x32-bit single-port block RAM                      : 1
# ROMs                                                 : 5
 16x7-bit ROM                                          : 4
 4x2-bit ROM                                           : 1
# Multipliers                                          : 1
 32x32-bit registered multiplier                       : 1
# Adders/Subtractors                                   : 9
 32-bit adder                                          : 4
 32-bit subtractor                                     : 1
 8-bit adder                                           : 4
# Counters                                             : 4
 17-bit up counter                                     : 2
 2-bit up counter                                      : 1
 27-bit up counter                                     : 1
# Registers                                            : 1422
 Flip-Flops                                            : 1422
# Comparators                                          : 4
 32-bit comparator equal                               : 1
 32-bit comparator greater                             : 1
 32-bit comparator less                                : 1
 32-bit comparator not equal                           : 1
# Multiplexers                                         : 66
 1-bit 32-to-1 multiplexer                             : 64
 16-bit 4-to-1 multiplexer                             : 1
 7-bit 4-to-1 multiplexer                              : 1
# Logic shifters                                       : 2
 32-bit shifter logical left                           : 1
 32-bit shifter logical right                          : 1
# Xors                                                 : 32
 1-bit xor2                                            : 32

=========================================================================

=========================================================================
*                         Low Level Synthesis                           *
=========================================================================
WARNING:Xst:2040 - Unit Complete_MIPS: 32 multi-source signals are replaced by logic (pull-up yes): Mem_Bus<0>, Mem_Bus<10>, Mem_Bus<11>, Mem_Bus<12>, Mem_Bus<13>, Mem_Bus<14>, Mem_Bus<15>, Mem_Bus<16>, Mem_Bus<17>, Mem_Bus<18>, Mem_Bus<19>, Mem_Bus<1>, Mem_Bus<20>, Mem_Bus<21>, Mem_Bus<22>, Mem_Bus<23>, Mem_Bus<24>, Mem_Bus<25>, Mem_Bus<26>, Mem_Bus<27>, Mem_Bus<28>, Mem_Bus<29>, Mem_Bus<2>, Mem_Bus<30>, Mem_Bus<31>, Mem_Bus<3>, Mem_Bus<4>, Mem_Bus<5>, Mem_Bus<6>, Mem_Bus<7>, Mem_Bus<8>, Mem_Bus<9>.

Optimizing unit <Complete_MIPS> ...

Optimizing unit <hexToSevenSeg> ...

Mapping all equations...
Building and optimizing final netlist ...
Found area constraint ratio of 100 (+ 5) on block Complete_MIPS, actual ratio is 40.
FlipFlop CPU/SR1_0 has been replicated 1 time(s)
FlipFlop CPU/SR2_0 has been replicated 1 time(s)

Final Macro Processing ...

Processing Unit <Complete_MIPS> :
	Found 2-bit shift register for signal <CPU/state_FFd3>.
	Found 2-bit shift register for signal <CPU/state_FFd7>.
	Found 2-bit shift register for signal <CPU/state_FFd11>.
	Found 2-bit shift register for signal <CPU/state_FFd15>.
	Found 2-bit shift register for signal <CPU/state_FFd19>.
	Found 2-bit shift register for signal <CPU/state_FFd23>.
	Found 2-bit shift register for signal <CPU/state_FFd27>.
	Found 2-bit shift register for signal <CPU/state_FFd29>.
	Found 2-bit shift register for signal <CPU/state_FFd37>.
	Found 2-bit shift register for signal <CPU/state_FFd41>.
	Found 2-bit shift register for signal <CPU/state_FFd45>.
	Found 2-bit shift register for signal <CPU/state_FFd49>.
	Found 2-bit shift register for signal <CPU/state_FFd51>.
	Found 2-bit shift register for signal <CPU/state_FFd55>.
	Found 2-bit shift register for signal <CPU/state_FFd59>.
	Found 2-bit shift register for signal <CPU/state_FFd63>.
	Found 2-bit shift register for signal <CPU/state_FFd67>.
	Found 2-bit shift register for signal <CPU/state_FFd71>.
	Found 2-bit shift register for signal <CPU/state_FFd75>.
	Found 2-bit shift register for signal <CPU/state_FFd79>.
	Found 2-bit shift register for signal <CPU/state_FFd83>.
Unit <Complete_MIPS> processed.

=========================================================================
Final Register Report

Macro Statistics
# Registers                                            : 1509
 Flip-Flops                                            : 1509
# Shift Registers                                      : 21
 2-bit shift register                                  : 21

=========================================================================

=========================================================================
*                           Partition Report                             *
=========================================================================

Partition Implementation Status
-------------------------------

  No Partitions were found in this design.

-------------------------------

=========================================================================
*                            Final Report                               *
=========================================================================
Final Results
RTL Top Level Output File Name     : Complete_MIPS.ngr
Top Level Output File Name         : Complete_MIPS
Output Format                      : NGC
Optimization Goal                  : Speed
Keep Hierarchy                     : NO

Design Statistics
# IOs                              : 17

Cell Usage :
# BELS                             : 4344
#      GND                         : 1
#      INV                         : 53
#      LUT1                        : 104
#      LUT2                        : 367
#      LUT2_L                      : 3
#      LUT3                        : 1219
#      LUT3_D                      : 49
#      LUT3_L                      : 6
#      LUT4                        : 646
#      LUT4_D                      : 8
#      LUT4_L                      : 109
#      MUXCY                       : 417
#      MUXF5                       : 583
#      MUXF6                       : 256
#      MUXF7                       : 128
#      MUXF8                       : 64
#      VCC                         : 1
#      XORCY                       : 330
# FlipFlops/Latches                : 1530
#      FD                          : 171
#      FDE                         : 1163
#      FDR                         : 85
#      FDS                         : 93
#      FDSE                        : 18
# RAMS                             : 1
#      RAMB16_S36                  : 1
# Shift Registers                  : 21
#      SRL16                       : 21
# Clock Buffers                    : 1
#      BUFGP                       : 1
# IO Buffers                       : 16
#      IBUF                        : 5
#      OBUF                        : 11
# MULTs                            : 4
#      MULT18X18SIO                : 4
=========================================================================

Device utilization summary:
---------------------------

Selected Device : 3s500efg320-5 

 Number of Slices:                     1844  out of   4656    39%  
 Number of Slice Flip Flops:           1530  out of   9312    16%  
 Number of 4 input LUTs:               2585  out of   9312    27%  
    Number used as logic:              2564
    Number used as Shift registers:      21
 Number of IOs:                          17
 Number of bonded IOBs:                  17  out of    232     7%  
 Number of BRAMs:                         1  out of     20     5%  
 Number of MULT18X18SIOs:                 4  out of     20    20%  
 Number of GCLKs:                         1  out of     24     4%  

---------------------------
Partition Resource Summary:
---------------------------

  No Partitions were found in this design.

---------------------------


=========================================================================
TIMING REPORT

NOTE: THESE TIMING NUMBERS ARE ONLY A SYNTHESIS ESTIMATE.
      FOR ACCURATE TIMING INFORMATION PLEASE REFER TO THE TRACE REPORT
      GENERATED AFTER PLACE-and-ROUTE.

Clock Information:
------------------
-----------------------------------+------------------------------------+-------+
Clock Signal                       | Clock buffer(FF name)              | Load  |
-----------------------------------+------------------------------------+-------+
CLK                                | BUFGP                              | 1542  |
CPU/reg1/conv1/cd1/kindaSlowClk    | NONE(CPU/reg1/conv1/sev_seg_ctrl_1)| 13    |
-----------------------------------+------------------------------------+-------+
INFO:Xst:2169 - HDL ADVISOR - Some clock signals were not automatically buffered by XST with BUFG/BUFR resources. Please use the buffer_type constraint in order to insert these buffers to the clock signals to help prevent skew problems.

Asynchronous Control Signals Information:
----------------------------------------
No asynchronous control signals found in this design

Timing Summary:
---------------
Speed Grade: -5

   Minimum period: 11.226ns (Maximum Frequency: 89.076MHz)
   Minimum input arrival time before clock: 1.731ns
   Maximum output required time after clock: 5.009ns
   Maximum combinational path delay: No path found

Timing Detail:
--------------
All values displayed in nanoseconds (ns)

=========================================================================
Timing constraint: Default period analysis for Clock 'CLK'
  Clock period: 11.226ns (frequency: 89.076MHz)
  Total number of paths / destination ports: 703979 / 2983
-------------------------------------------------------------------------
Delay:               11.226ns (Levels of Logic = 50)
  Source:            CPU/Mmult_prod_mult0000_submult_0 (MULT)
  Destination:       CPU/Mmult_prod_mult0000_0 (FF)
  Source Clock:      CLK rising
  Destination Clock: CLK rising

  Data Path: CPU/Mmult_prod_mult0000_submult_0 to CPU/Mmult_prod_mult0000_0
                                Gate     Net
    Cell:in->out      fanout   Delay   Delay  Logical Name (Net Name)
    ----------------------------------------  ------------
     MULT18X18SIO:CLK->P17    1   4.410   0.426  CPU/Mmult_prod_mult0000_submult_0 (CPU/Mmult_prod_mult0000_submult_0_P_to_Adder_A_17)
     LUT2:I1->O            1   0.612   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_lut<17> (CPU/Mmult_prod_mult0000_submult_00_Madd_lut<17>)
     MUXCY:S->O            1   0.404   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<17> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<17>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<18> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<18>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<19> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<19>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<20> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<20>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<21> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<21>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<22> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<22>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<23> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<23>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<24> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<24>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<25> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<25>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<26> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<26>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<27> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<27>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<28> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<28>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<29> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<29>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<30> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<30>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<31> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<31>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<32> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<32>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<33> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<33>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<34> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<34>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<35> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<35>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<36> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<36>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<37> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<37>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<38> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<38>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<39> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<39>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<40> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<40>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<41> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<41>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<42> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<42>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<43> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<43>)
     MUXCY:CI->O           1   0.052   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<44> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<44>)
     MUXCY:CI->O           1   0.052   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<45> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<45>)
     MUXCY:CI->O           1   0.052   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<46> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<46>)
     MUXCY:CI->O           0   0.052   0.000  CPU/Mmult_prod_mult0000_submult_00_Madd_cy<47> (CPU/Mmult_prod_mult0000_submult_00_Madd_cy<47>)
     XORCY:CI->O           1   0.699   0.426  CPU/Mmult_prod_mult0000_submult_00_Madd_xor<48> (CPU/Mmult_prod_mult0000_submult_0_48)
     LUT2:I1->O            1   0.612   0.000  CPU/Mmult_prod_mult0000_Madd_lut<48> (CPU/Mmult_prod_mult0000_Madd_lut<48>)
     MUXCY:S->O            1   0.404   0.000  CPU/Mmult_prod_mult0000_Madd_cy<48> (CPU/Mmult_prod_mult0000_Madd_cy<48>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_Madd_cy<49> (CPU/Mmult_prod_mult0000_Madd_cy<49>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_Madd_cy<50> (CPU/Mmult_prod_mult0000_Madd_cy<50>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_Madd_cy<51> (CPU/Mmult_prod_mult0000_Madd_cy<51>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_Madd_cy<52> (CPU/Mmult_prod_mult0000_Madd_cy<52>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_Madd_cy<53> (CPU/Mmult_prod_mult0000_Madd_cy<53>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_Madd_cy<54> (CPU/Mmult_prod_mult0000_Madd_cy<54>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_Madd_cy<55> (CPU/Mmult_prod_mult0000_Madd_cy<55>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_Madd_cy<56> (CPU/Mmult_prod_mult0000_Madd_cy<56>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_Madd_cy<57> (CPU/Mmult_prod_mult0000_Madd_cy<57>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_Madd_cy<58> (CPU/Mmult_prod_mult0000_Madd_cy<58>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_Madd_cy<59> (CPU/Mmult_prod_mult0000_Madd_cy<59>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_Madd_cy<60> (CPU/Mmult_prod_mult0000_Madd_cy<60>)
     MUXCY:CI->O           1   0.051   0.000  CPU/Mmult_prod_mult0000_Madd_cy<61> (CPU/Mmult_prod_mult0000_Madd_cy<61>)
     MUXCY:CI->O           0   0.051   0.000  CPU/Mmult_prod_mult0000_Madd_cy<62> (CPU/Mmult_prod_mult0000_Madd_cy<62>)
     XORCY:CI->O           1   0.699   0.000  CPU/Mmult_prod_mult0000_Madd_xor<63> (CPU/Mmult_prod_mult0000_Madd_63)
     FDE:D                     0.268          CPU/Mmult_prod_mult0000_0
    ----------------------------------------
    Total                     11.226ns (10.374ns logic, 0.852ns route)
                                       (92.4% logic, 7.6% route)

=========================================================================
Timing constraint: Default period analysis for Clock 'CPU/reg1/conv1/cd1/kindaSlowClk'
  Clock period: 3.367ns (frequency: 297.027MHz)
  Total number of paths / destination ports: 32 / 16
-------------------------------------------------------------------------
Delay:               3.367ns (Levels of Logic = 1)
  Source:            CPU/reg1/conv1/sev_seg_ctrl_0 (FF)
  Destination:       CPU/reg1/conv1/dOneEn (FF)
  Source Clock:      CPU/reg1/conv1/cd1/kindaSlowClk rising
  Destination Clock: CPU/reg1/conv1/cd1/kindaSlowClk rising

  Data Path: CPU/reg1/conv1/sev_seg_ctrl_0 to CPU/reg1/conv1/dOneEn
                                Gate     Net
    Cell:in->out      fanout   Delay   Delay  Logical Name (Net Name)
    ----------------------------------------  ------------
     FDR:C->Q             20   0.514   1.089  CPU/reg1/conv1/sev_seg_ctrl_0 (CPU/reg1/conv1/sev_seg_ctrl_0)
     LUT2:I0->O            1   0.612   0.357  CPU/reg1/conv1/dOneEn_cmp_eq0000_inv1 (CPU/reg1/conv1/dOneEn_cmp_eq0000_inv)
     FDR:R                     0.795          CPU/reg1/conv1/dOneEn
    ----------------------------------------
    Total                      3.367ns (1.921ns logic, 1.446ns route)
                                       (57.1% logic, 42.9% route)

=========================================================================
Timing constraint: Default OFFSET IN BEFORE for Clock 'CLK'
  Total number of paths / destination ports: 5 / 5
-------------------------------------------------------------------------
Offset:              1.731ns (Levels of Logic = 1)
  Source:            SW<0> (PAD)
  Destination:       CPU/reg1/REG_1_0 (FF)
  Destination Clock: CLK rising

  Data Path: SW<0> to CPU/reg1/REG_1_0
                                Gate     Net
    Cell:in->out      fanout   Delay   Delay  Logical Name (Net Name)
    ----------------------------------------  ------------
     IBUF:I->O             1   1.106   0.357  SW_0_IBUF (SW_0_IBUF)
     FD:D                      0.268          CPU/reg1/REG_1_0
    ----------------------------------------
    Total                      1.731ns (1.374ns logic, 0.357ns route)
                                       (79.4% logic, 20.6% route)

=========================================================================
Timing constraint: Default OFFSET OUT AFTER for Clock 'CPU/reg1/conv1/cd1/kindaSlowClk'
  Total number of paths / destination ports: 11 / 11
-------------------------------------------------------------------------
Offset:              5.009ns (Levels of Logic = 2)
  Source:            CPU/reg1/conv1/dThreeEn (FF)
  Destination:       dThreeEn1 (PAD)
  Source Clock:      CPU/reg1/conv1/cd1/kindaSlowClk rising

  Data Path: CPU/reg1/conv1/dThreeEn to dThreeEn1
                                Gate     Net
    Cell:in->out      fanout   Delay   Delay  Logical Name (Net Name)
    ----------------------------------------  ------------
     FDR:C->Q              1   0.514   0.357  CPU/reg1/conv1/dThreeEn (CPU/reg1/conv1/dThreeEn)
     INV:I->O              1   0.612   0.357  CPU/reg1/conv1/dThreeEn11_INV_0 (dThreeEn1_OBUF)
     OBUF:I->O                 3.169          dThreeEn1_OBUF (dThreeEn1)
    ----------------------------------------
    Total                      5.009ns (4.295ns logic, 0.714ns route)
                                       (85.7% logic, 14.3% route)

=========================================================================


Total REAL time to Xst completion: 36.00 secs
Total CPU time to Xst completion: 36.78 secs
 
--> 

Total memory usage is 261164 kilobytes

Number of errors   :    0 (   0 filtered)
Number of warnings :   56 (   0 filtered)
Number of infos    :   10 (   0 filtered)

